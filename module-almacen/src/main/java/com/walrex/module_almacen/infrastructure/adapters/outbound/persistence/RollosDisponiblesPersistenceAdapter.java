package com.walrex.module_almacen.infrastructure.adapters.outbound.persistence;

import org.springframework.stereotype.Component;

import com.walrex.module_almacen.application.ports.output.ConsultarRollosDisponiblesPort;
import com.walrex.module_almacen.domain.model.dto.RolloDisponibleDevolucionDTO;
import com.walrex.module_almacen.infrastructure.adapters.outbound.persistence.mapper.RolloDisponibleDevolucionMapper;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Flux;

/**
 * Adapter de persistencia para consultar rollos disponibles para devoluci√≥n
 * Responsabilidad: Orquestar consulta y transformaci√≥n de datos
 * Usa R2dbcTemplate para evitar problemas con projections
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class RollosDisponiblesPersistenceAdapter implements ConsultarRollosDisponiblesPort {

    private final RollosDisponiblesR2dbcTemplateService r2dbcTemplateService;
    private final RolloDisponibleDevolucionMapper rolloMapper;

    @Override
    public Flux<RolloDisponibleDevolucionDTO> buscarRollosDisponibles(Integer idCliente, Integer idArticulo) {
        log.info("üîç Consultando rollos disponibles en BD - Cliente: {}, Art√≠culo: {}", idCliente, idArticulo);

        return r2dbcTemplateService.buscarRollosDisponiblesParaDevolucion(idCliente, idArticulo)
                .map(rolloMapper::projectionToDto)
                .filter(this::esAlmacenPermitidoParaDevolucion)
                .doOnNext(rollo -> {
                    log.debug("‚úÖ Rollo disponible encontrado en BD (almac√©n permitido): {} - Almac√©n: {}",
                            rollo.getCodRollo(), rollo.getIdIngresoAlmacen());
                })
                .doOnComplete(
                        () -> log.info("üéØ Consulta de rollos disponibles completada para Cliente: {}, Art√≠culo: {}",
                                idCliente, idArticulo))
                .doOnError(error -> log.error("‚ùå Error al consultar rollos disponibles en BD: {}", error.getMessage()))
                .onErrorMap(throwable -> new RuntimeException("Error al consultar rollos disponibles", throwable));
    }

    /**
     * Valida si el rollo pertenece a un almac√©n permitido para devoluci√≥n
     * Almacenes permitidos: 2 (Tela Cruda), 10 (Almac√©n de Devoluci√≥n), 32 (Almac√©n
     * de Preparado)
     */
    private boolean esAlmacenPermitidoParaDevolucion(RolloDisponibleDevolucionDTO rollo) {
        log.info("üîç Validando almac√©n permitido para devoluci√≥n - Rollo: {}: {}", rollo.getCodRollo(), rollo);
        if (rollo.getIdIngresoAlmacen() == null) {
            log.warn("‚ö†Ô∏è Rollo {} sin ID de almac√©n, se excluye de devoluci√≥n", rollo.getCodRollo());
            return false;
        }

        Integer idAlmacen = rollo.getIdIngresoAlmacen();
        boolean esPermitido = idAlmacen.equals(2) || idAlmacen.equals(10) || idAlmacen.equals(32);

        if (!esPermitido) {
            log.debug("üö´ Rollo {} del almac√©n {} no est√° permitido para devoluci√≥n",
                    rollo.getCodRollo(), idAlmacen);
        }

        return esPermitido;
    }
}